<script setup>
import { ref, computed, onMounted } from 'vue'
import { usePlayersStore } from '@/stores/playersStore'
import { useRouter } from 'vue-router'

const playersStore = usePlayersStore()
const router = useRouter()

// リアクティブな状態管理
const visiblePlayers = ref([])
const showPlayerDetails = ref([])
const currentRank = ref(0)
const isAutoPlay = ref(false)
const autoPlayInterval = ref(null)

// 音響効果
const sounds = {
  champion: new Audio('./sounds/levelup.mp3'),
  reveal: new Audio('./sounds/newstitle1.mp3'),
  fanfare: new Audio('./sounds/jajaan.mp3')
}

// 計算されたプロパティ
const totalPlayers = computed(() => playersStore.playersRanked.length)
const hasPointData = computed(() => showPlayerDetails.value[0] || false)

const dividerStyle = computed(() => {
  const margin = Math.max(10, 40 - (totalPlayers.value * 3))
  return {
    'margin-top': `${margin}px`,
    'margin-bottom': `${margin}px`
  }
})

// アニメーション設定
const animationSettings = {
  nameDelay: 800,
  detailsDelay: 1200,
  autoPlayDelay: 2500
}

// 音声再生ヘルパー
const playSound = (soundKey) => {
  const sound = sounds[soundKey]
  if (sound) {
    sound.currentTime = 0
    sound.play().catch(console.warn)
  }
}

// 次の順位を表示
const revealNextPlayer = () => {
  if (currentRank.value >= totalPlayers.value) return
  
  const rankIndex = totalPlayers.value - 1 - currentRank.value
  
  // プレイヤー名を表示
  visiblePlayers.value[rankIndex] = true
  
  // 適切な効果音を再生
  const isChampion = rankIndex === 0
  playSound(isChampion ? 'champion' : 'reveal')
  
  // 詳細情報を遅延表示
  setTimeout(() => {
    showPlayerDetails.value[rankIndex] = true
  }, animationSettings.nameDelay)
  
  currentRank.value++
}

// 特定プレイヤーの詳細を表示
const showDetails = (playerIndex) => {
  showPlayerDetails.value[playerIndex] = true
}

// 自動再生の切り替え
const toggleAutoPlay = () => {
  if (isAutoPlay.value) {
    stopAutoPlay()
  } else {
    startAutoPlay()
  }
}

const startAutoPlay = () => {
  if (currentRank.value >= totalPlayers.value) return
  
  isAutoPlay.value = true
  autoPlayInterval.value = setInterval(() => {
    if (currentRank.value >= totalPlayers.value) {
      stopAutoPlay()
      playSound('fanfare')
      return
    }
    revealNextPlayer()
  }, animationSettings.autoPlayDelay)
}

const stopAutoPlay = () => {
  isAutoPlay.value = false
  if (autoPlayInterval.value) {
    clearInterval(autoPlayInterval.value)
    autoPlayInterval.value = null
  }
}

// 全て表示
const revealAll = () => {
  stopAutoPlay()
  for (let i = 0; i < totalPlayers.value; i++) {
    visiblePlayers.value[i] = true
    showPlayerDetails.value[i] = true
  }
  currentRank.value = totalPlayers.value
  playSound('fanfare')
}

// リセット
const resetDisplay = () => {
  stopAutoPlay()
  visiblePlayers.value = []
  showPlayerDetails.value = []
  currentRank.value = 0
}

// ナビゲーション
const navigateToPointEntry = () => {
  router.push('/point')
}

const navigateToPlayerInfo = () => {
  router.push('/players')
}

const navigateToOldRanking = () => {
  router.push('/ranking')
}

// 初期化
onMounted(() => {
  visiblePlayers.value = new Array(totalPlayers.value).fill(false)
  showPlayerDetails.value = new Array(totalPlayers.value).fill(false)
})
</script>

<template>
  <div class="ranking-container">
    <!-- ヘッダー -->
    <div class="header-section">
      <h1 class="title">🏆 成績発表 🏆</h1>
      <div class="progress-info">
        {{ currentRank }}/{{ totalPlayers }} 名発表済み
      </div>
    </div>

    <!-- メインコンテンツ -->
    <div class="main-content">
      <div 
        v-for="(player, index) in playersStore.playersRanked" 
        :key="`player-${index}`"
        class="player-row"
      >
        <!-- 順位 -->
        <div 
          :class="['rank-display', { 'champion-rank': index === 0 }]"
        >
          {{ index + 1 }}位
        </div>

        <!-- プレイヤー名 -->
        <transition 
          name="slide-in" 
          @after-enter="() => showDetails(index)"
        >
          <div 
            v-show="visiblePlayers[index]"
            :class="['player-name', { 'champion-name': index === 0 }]"
          >
            {{ player.name }}
          </div>
        </transition>

        <!-- 詳細情報 -->
        <transition name="fade-in">
          <div 
            v-show="showPlayerDetails[index]"
            class="player-details"
          >
            <span 
              v-if="hasPointData"
              :class="['score-info', { 'champion-score': index === 0 }]"
            >
              {{ player.point }}点
            </span>
            <span 
              :class="['time-info', { 'champion-time': index === 0 }]"
            >
              {{ player.time }}秒
            </span>
            <span 
              :class="['grade-info', { 'champion-grade': index === 0 }]"
            >
              {{ player.grade }}
            </span>
            <span 
              :class="['school-info', { 'champion-school': index === 0 }]"
            >
              {{ player.school }}
            </span>
          </div>
        </transition>

        <hr class="divider" :style="dividerStyle">
      </div>
    </div>

    <!-- コントロールパネル -->
    <div class="control-panel">
      <div class="control-row">
        <button 
          class="btn btn-outline-info"
          @click="navigateToPointEntry"
        >
          ⬅️ 得点入力
        </button>

        <button 
          class="btn btn-primary btn-lg"
          @click="revealNextPlayer"
          :disabled="currentRank >= totalPlayers"
        >
          {{ currentRank >= totalPlayers ? '✅ 完了' : '▶️ 次を表示' }}
        </button>

        <button 
          class="btn btn-outline-danger"
          @click="navigateToPlayerInfo"
        >
          選手情報 ➡️
        </button>
      </div>

      <div class="control-row secondary-controls">
        <button 
          class="btn btn-outline-secondary btn-sm"
          @click="toggleAutoPlay"
          :disabled="currentRank >= totalPlayers"
        >
          {{ isAutoPlay ? '⏸️ 停止' : '⏯️ 自動再生' }}
        </button>

        <button 
          class="btn btn-outline-warning btn-sm"
          @click="revealAll"
          :disabled="currentRank >= totalPlayers"
        >
          🔍 全て表示
        </button>

        <button 
          class="btn btn-outline-light btn-sm"
          @click="resetDisplay"
        >
          🔄 リセット
        </button>

        <button 
          class="btn btn-outline-success btn-sm"
          @click="navigateToOldRanking"
        >
          📊 旧版表示
        </button>
      </div>
    </div>
  </div>
</template>

<style scoped>
.ranking-container {
  background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
  color: #ffffff;
  min-height: 100vh;
  padding: 20px;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.header-section {
  text-align: center;
  margin-bottom: 30px;
}

.title {
  font-size: 3rem;
  font-weight: bold;
  margin-bottom: 10px;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
}

.progress-info {
  font-size: 1.2rem;
  opacity: 0.9;
  background: rgba(255, 255, 255, 0.1);
  padding: 8px 16px;
  border-radius: 20px;
  display: inline-block;
}

.main-content {
  max-width: 1200px;
  margin: 0 auto;
}

.player-row {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
  flex-wrap: wrap;
}

.rank-display {
  width: 120px;
  text-align: right;
  font-size: 2.5rem;
  font-weight: bold;
  margin-right: 20px;
  color: #ffd700;
}

.champion-rank {
  font-size: 3.5rem;
  color: #ff69b4;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
}

.player-name {
  flex: 1;
  font-size: 2.8rem;
  font-weight: bold;
  margin-right: 20px;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
}

.champion-name {
  font-size: 4rem;
  color: #ff69b4;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  width: 100%;
  text-align: center;
  margin: 20px 0;
}

.player-details {
  display: flex;
  gap: 20px;
  align-items: center;
  flex-wrap: wrap;
  width: 100%;
  margin-top: 10px;
}

.score-info, .time-info, .grade-info, .school-info {
  font-size: 1.8rem;
  padding: 5px 10px;
  border-radius: 8px;
  background: rgba(255, 255, 255, 0.1);
}

.score-info {
  color: #ff69b4;
  font-weight: bold;
}

.time-info {
  color: #87ceeb;
}

.grade-info {
  color: #98fb98;
}

.school-info {
  color: #ffd700;
}

.champion-score, .champion-time, .champion-grade, .champion-school {
  font-size: 2.2rem;
  background: rgba(255, 105, 180, 0.2);
  border: 2px solid #ff69b4;
}

.divider {
  width: 95%;
  margin: 20px auto;
  border: none;
  border-top: 3px solid rgba(255, 255, 255, 0.3);
}

.control-panel {
  position: fixed;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.8);
  padding: 20px;
  border-radius: 15px;
  backdrop-filter: blur(10px);
}

.control-row {
  display: flex;
  gap: 15px;
  justify-content: center;
  margin-bottom: 10px;
}

.secondary-controls {
  margin-bottom: 0;
}

.btn {
  padding: 10px 20px;
  border-radius: 8px;
  font-weight: bold;
  transition: all 0.3s ease;
}

.btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}

.btn-lg {
  padding: 15px 30px;
  font-size: 1.2rem;
}

.btn-sm {
  padding: 5px 15px;
  font-size: 0.9rem;
}

/* アニメーション */
.slide-in-enter-active {
  transition: all 1s ease-out;
}

.slide-in-enter-from {
  transform: translateX(100%);
  opacity: 0;
}

.slide-in-enter-to {
  transform: translateX(0);
  opacity: 1;
}

.fade-in-enter-active {
  transition: opacity 0.6s ease-in;
}

.fade-in-enter-from {
  opacity: 0;
}

.fade-in-enter-to {
  opacity: 1;
}

/* レスポンシブ対応 */
@media (max-width: 768px) {
  .title {
    font-size: 2rem;
  }
  
  .player-name {
    font-size: 2rem;
  }
  
  .champion-name {
    font-size: 2.5rem;
  }
  
  .rank-display {
    font-size: 1.8rem;
    width: 80px;
  }
  
  .champion-rank {
    font-size: 2.5rem;
  }
  
  .control-panel {
    position: relative;
    transform: none;
    margin-top: 30px;
  }
  
  .control-row {
    flex-wrap: wrap;
  }
  
  .player-details {
    font-size: 1.4rem;
  }
}
</style>
